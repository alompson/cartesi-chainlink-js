// SPDX-License-Identifier: MIT
// Auto-generated by chainlink-automation-lib
pragma solidity ^0.8.20;

import { ILogAutomation, Log } from "@chainlink/contracts/src/v0.8/automation/interfaces/ILogAutomation.sol";

contract GeneratedLogKeeper is ILogAutomation {
    /**
     * @notice This function is called off-chain by the Chainlink Automation network after a
     * log is detected that matches the trigger filters.
     * @dev This template assumes the upkeep is always needed and passes the raw log data
     * to performUpkeep for on-chain processing.
     * @param log The raw log data that triggered the upkeep.
     * @return upkeepNeeded A boolean indicating if performUpkeep should be called (always true).
     * @return performData The data to pass to performUpkeep (the raw log data).
     */
    function checkLog(
        Log calldata log,
        bytes memory /* checkData */
    )
        external
        pure
        override
        returns (bool upkeepNeeded, bytes memory performData)
    {
        upkeepNeeded = true;
        performData = log.data;
        return (upkeepNeeded, performData);
    }

    /**
     * @notice This function is called on-chain by the Chainlink Automation network when
     * checkLog returns true.
     * @param performData The data returned by checkLog, which is the raw data from the
     * emitted event log. You are responsible for decoding it.
     */
    function performUpkeep(bytes calldata performData) external override {
        // Your action logic will be injected here.
        // Example:
        // (uint256 amount, address recipient) = abi.decode(performData, (uint256, address));
        {{performLogic}}
    }
}